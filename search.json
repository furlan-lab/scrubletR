[{"path":"https://furlan-lab.github.io/scrubletR/articles/ImplementationHassles.html","id":"installation-of-packages","dir":"Articles","previous_headings":"","what":"Installation of packages","title":"Implementing Scrublet in R","text":"Note notebook run using Rstudio enabling R Python environments maintained throughout.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/articles/ImplementationHassles.html","id":"installing-scrubletr","dir":"Articles","previous_headings":"Installation of packages","what":"Installing scrubletR","title":"Implementing Scrublet in R","text":"need devtools package installed…","code":"devtools::install_github(\"furlan-lab/scrubletR\")"},{"path":"https://furlan-lab.github.io/scrubletR/articles/ImplementationHassles.html","id":"loading-reticulate","dir":"Articles","previous_headings":"Installation of packages","what":"Loading reticulate","title":"Implementing Scrublet in R","text":"faint heart… can read getting python working within R [] (https://rstudio.github.io/reticulate/). can either activate reticulate environment use ‘pip install scrublet’ install scrublet try R . use conda (reluctantly) get install R terminal creating new conda environment called ‘reticulate’. Regardless , can check installed using R. successful, get output. Failure look something like ","code":"library(reticulate) py_config() py_install(\"scrublet\") conda activate reticulate pip install scrublet py_run_string(\"import scrublet\") py_run_string(\"import scrubletoops\")"},{"path":"https://furlan-lab.github.io/scrubletR/articles/ImplementationHassles.html","id":"comparing-implementations","dir":"Articles","previous_headings":"","what":"Comparing Implementations","title":"Implementing Scrublet in R","text":"Ok working R python versions Scrublet, let’s go differences. First let’s load data","code":""},{"path":"https://furlan-lab.github.io/scrubletR/articles/ImplementationHassles.html","id":"load-data","dir":"Articles","previous_headings":"Comparing Implementations","what":"Load data","title":"Implementing Scrublet in R","text":"","code":"suppressPackageStartupMessages({   library(viewmastRust)   library(Seurat)   library(scCustomize)   library(Matrix)   library(ggplot2)   library(scrubletR) })  if(grepl(\"^gizmo\", Sys.info()[\"nodename\"])){   ROOT_DIR2<-\"/fh/fast/furlan_s/grp/data/ddata/BM_data\" } else {   ROOT_DIR2<-\"/Users/sfurlan/Library/CloudStorage/OneDrive-SharedLibraries-FredHutchinsonCancerCenter/Furlan_Lab - General/experiments/patient_marrows/aggr/cds/indy\" }  #query dataset seuP<-readRDS(file.path(ROOT_DIR2, \"220831_WC1.RDS\")) DimPlot_scCustom(seuP, label = F) #counts_matrix<-t(seuP@assays$RNA@counts[,1:2000]) counts_matrix<-t(seuP@assays$RNA@counts)"},{"path":"https://furlan-lab.github.io/scrubletR/articles/ImplementationHassles.html","id":"first-step","dir":"Articles","previous_headings":"Comparing Implementations","what":"First step","title":"Implementing Scrublet in R","text":"first step scrublet data processing size factor normalization. Let’s see normalized counts compare across two implementations. next block, run scrublet pipeline normalization saved counts R environment “py_E_obs_norm”","code":"import numpy as np import scrublet as scr scrub = scr.Scrublet(r.counts_matrix)  ##set params synthetic_doublet_umi_subsampling=1.0 use_approx_neighbors=True distance_metric='euclidean' get_doublet_neighbor_parents=False min_counts=3 min_cells=3 min_gene_variability_pctl=85 log_transform=False mean_center=True, normalize_variance=True n_prin_comps=30 svd_solver='arpack' verbose=True random_state = 0  #clear data in object scrub._E_sim = None scrub._E_obs_norm = None scrub._E_sim_norm = None scrub._gene_filter = np.arange(scrub._E_obs.shape[1])  #run normalize scr.pipeline_normalize(scrub)  #capture size factor normalized counts r.py_E_obs_norm = scrub._E_obs_norm.data"},{"path":"https://furlan-lab.github.io/scrubletR/articles/ImplementationHassles.html","id":"run-scrubletr-size-factor-normalization","dir":"Articles","previous_headings":"Comparing Implementations > First step","what":"Run scrubletR size factor normalization","title":"Implementing Scrublet in R","text":"see sets counts compare, can similarly run scrubletR normalization correlate sample (n=5000) log transformed counts using ggplot. Unsurprisingly different.","code":"#In R #set params synthetic_doublet_umi_subsampling = 1.0 use_approx_neighbors = TRUE distance_metric = 'euclidean' get_doublet_neighbor_parents = FALSE min_counts = 3 min_cells = 3 min_gene_variability_pctl = 85 log_transform = FALSE mean_center = T normalize_variance = T n_prin_comps = 30 verbose = TRUE   #instantiate object scr<-ScrubletR$new(counts_matrix = counts_matrix)  scr$pipeline_normalize()  ix<-sample(1:length(scr$E_obs_norm@x), 5000) ggplot(data.frame(x=log(scr$E_obs_norm@x[ix]), y = log(py_E_obs_norm[ix])), aes(x=x, y=y))+geom_point(size = 0.01)+xlab(\"scrubletR size-factor normalized counts\")+ylab(\"scrublet (python) size-factor normalized counts\")+theme_bw()"},{"path":"https://furlan-lab.github.io/scrubletR/articles/ImplementationHassles.html","id":"second-step","dir":"Articles","previous_headings":"Comparing Implementations","what":"Second step","title":"Implementing Scrublet in R","text":"Next pipeline select subset features highest variable expression. default set find set features exhibit expression variance 85th percentile measured using v-statistic.","code":"genefilter = scr.filter_genes(scrub._E_obs_norm,                                         min_counts=min_counts,                                         min_cells=min_cells,                                         min_vscore_pctl=min_gene_variability_pctl, show_vscore_plot=False) v_scores, CV_eff, CV_input, gene_ix, mu_gene, FF_gene, a, b = scr.get_vscores(scrub._E_obs_norm) r.py_vscores = v_scores min_vscore_pctl=min_gene_variability_pctl ix2 = v_scores>0 v_scores = v_scores[ix2] gene_ix = gene_ix[ix2] mu_gene = mu_gene[ix2] FF_gene = FF_gene[ix2] min_vscore = np.percentile(v_scores, min_vscore_pctl) final_ix = (((scrub._E_obs_norm[:,gene_ix] >= min_counts).sum(0).A.squeeze() >= min_cells) & (v_scores >= min_vscore))      #import inspect #lines = inspect.getsource(scr.filter_genes) #print(lines)"},{"path":"https://furlan-lab.github.io/scrubletR/articles/ImplementationHassles.html","id":"problem-1","dir":"Articles","previous_headings":"Comparing Implementations","what":"Problem #1","title":"Implementing Scrublet in R","text":"V-scores slightly different R python. correlation pretty good howewever likely won’t affect performance much","code":"#scr$pipeline_get_gene_filter()   vscores_result<-get_vscores(scr$E_obs_norm) Vscores <- as.numeric(vscores_result$v_scores) # ggplot(data.frame(x=log(Vscores), y = log(py_vscores)), aes(x=x, y=y))+geom_point(size = 0.01)+xlab(\"scrubletR vscores\")+ylab(\"scrublet (python) vscores\")+theme_bw()  df<-data.frame(vscore_R=log(Vscores), vscore_py = log(py_vscores), indices_py=1:length(Vscores) %in% (py$gene_ix+1), indices_R=1:length(Vscores) %in% vscores_result$gene_ix)  df$selected_cat<-factor(with(df, 2*indices_py + indices_R + 1)) levels(df$selected_cat)<-c(\"neither\", \"both\")  #ggplot(df, aes(x=vscore_R, y=vscore_py, color = selected_cat))+geom_point(size = 0.01)+theme_bw()  gene_ix <- vscores_result$gene_ix mu_gene <- vscores_result$mu_gene FF_gene <- vscores_result$FF_gene a <- vscores_result$a b <- vscores_result$b  ix2 <- Vscores > 0 Vscores <- Vscores[ix2] gene_ix <- gene_ix[ix2] mu_gene <- mu_gene[ix2] FF_gene <- FF_gene[ix2]  min_vscore_pctl=min_gene_variability_pctl min_vscore <- quantile(Vscores, prob = min_vscore_pctl / 100)  ix <- ((colSums(scr$E_obs_norm[, gene_ix] >= min_counts) >= min_cells) & (Vscores >= min_vscore))  df$selected_R<-ix df$selected_py<-py$final_ix df$selected_cat<-factor(with(df, 2*selected_py + selected_R + 1)) levels(df$selected_cat)<-c(\"neither\", \"r_only\", \"py_only\", \"both\") ggplot(df, aes(x=vscore_R, y=vscore_py, color = selected_cat))+geom_point(size = 0.2)+theme_bw() table(df$selected_cat) ##  ## neither  r_only py_only    both  ##   22149      10       5    2472"},{"path":"https://furlan-lab.github.io/scrubletR/articles/ImplementationHassles.html","id":"highly-variant-features-using-r-method","dir":"Articles","previous_headings":"Comparing Implementations > Problem #1","what":"Highly variant features using R method","title":"Implementing Scrublet in R","text":"","code":"scr$pipeline_get_gene_filter(plot = TRUE) scr$pipeline_apply_gene_filter()"},{"path":"https://furlan-lab.github.io/scrubletR/articles/ImplementationHassles.html","id":"simulating-doublets","dir":"Articles","previous_headings":"Comparing Implementations > Problem #1","what":"Simulating doublets","title":"Implementing Scrublet in R","text":"","code":"sim_doublet_ratio = 2.0 synthetic_doublet_umi_subsampling = 1.0  scr$simulate_doublets(sim_doublet_ratio=sim_doublet_ratio, synthetic_doublet_umi_subsampling=synthetic_doublet_umi_subsampling)  scr$pipeline_normalize(postnorm_total=1e6) scr.pipeline_get_gene_filter(scrub) scr.pipeline_apply_gene_filter(scrub) scrub.simulate_doublets(sim_doublet_ratio=scrub.sim_doublet_ratio, synthetic_doublet_umi_subsampling=synthetic_doublet_umi_subsampling) scr.pipeline_normalize(scrub, postnorm_total=1e6) r.py_Esimnorm = scrub._E_sim_norm gene_filter = scrub._gene_filter r.py_E_obs_norm = scrub._E_obs_norm import copy  scrub_preZ = copy.deepcopy(scrub)"},{"path":"https://furlan-lab.github.io/scrubletR/articles/ImplementationHassles.html","id":"lets-umap","dir":"Articles","previous_headings":"","what":"Let’s umap","title":"Implementing Scrublet in R","text":"brind pseudo doublets original count matrix visualize using UMAP across two implemnetations. look similar.","code":"library(magrittr) rcounts<-t(rbind(scr$E_obs_norm, scr$E_sim_norm)) rownames(rcounts)<-rownames(seuP)[scr$gene_filter] colnames(rcounts)<-1:dim(rcounts)[2] seuR<-CreateSeuratObject(rcounts, meta.data = data.frame(celltype=c(as.character(seuP$celltype), rep(\"pseudodoublet\", length(seuP$celltype)*2)), row.names = colnames(rcounts))) seuR <-NormalizeData(seuR) %>% FindVariableFeatures(nfeatures = 1000) %>% ScaleData() %>% RunPCA(npcs = 50) ElbowPlot(seuR, 50) seuR<- FindNeighbors(seuR, dims = 1:30) %>% FindClusters() %>% RunUMAP(dims = 1:30) ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ##  ## Number of nodes: 41742 ## Number of edges: 1409152 ##  ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.8846 ## Number of communities: 27 ## Elapsed time: 8 seconds DimPlot(seuR, group.by = \"celltype\", cols = as.character(pals::polychrome(20))[c(1,3:16,2)], alpha = 0.1)+ggtitle(\"scrubletR\") pycounts<-t(rbind(py_E_obs_norm, py_Esimnorm)) rownames(pycounts)<-rownames(seuP)[py$gene_filter] colnames(pycounts)<-1:dim(pycounts)[2] seuPy<-CreateSeuratObject(pycounts, meta.data = data.frame(celltype=c(as.character(seuP$celltype), rep(\"pseudodoublet\", length(seuP$celltype)*2)), row.names = colnames(pycounts))) seuPy <-NormalizeData(seuPy) %>% FindVariableFeatures(nfeatures = 1000) %>% ScaleData() %>% RunPCA(npcs = 50) ElbowPlot(seuPy, 50) seuPy<- FindNeighbors(seuPy, dims = 1:40) %>% FindClusters() %>% RunUMAP(dims = 1:40) ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ##  ## Number of nodes: 41742 ## Number of edges: 1477580 ##  ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.8791 ## Number of communities: 25 ## Elapsed time: 8 seconds DimPlot(seuPy, group.by = \"celltype\", cols = as.character(pals::polychrome(20))[c(1,3:16,2)], alpha = 0.1)+ggtitle(\"Scrublet (python)\")"},{"path":"https://furlan-lab.github.io/scrubletR/articles/ImplementationHassles.html","id":"z-scoring","dir":"Articles","previous_headings":"Let’s umap","what":"Z-scoring","title":"Implementing Scrublet in R","text":"default scrublet pathway performs z-scaling procedure across data","code":"scrub_preZ._E_obs_norm.shape ## (13914, 2477) gene_means = scrub._E_obs_norm.mean(0) gene_stdevs = np.sqrt(scr.sparse_var(scrub._E_obs_norm))  py_zscored = scr.sparse_multiply((scrub._E_obs_norm - gene_means).T, 1/gene_stdevs).T"},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/articles/ImplementationHassles.html","id":"step-1-calculate-gene-mean-and-stdev---look-pretty-similar","dir":"Articles","previous_headings":"Let’s umap > step by step","what":"Step 1 calculate gene mean and stdev - look pretty similar","title":"Implementing Scrublet in R","text":"","code":"gene_mean = as.numeric(colMeans(scr$E_obs_norm)) #######changed to column - IS CORRECT gene_stdev = as.numeric(sqrt(scrubletR:::sparse_var(scr$E_obs_norm, axis = 2))) # print_py(gene_mean) # print_py(gene_stdev) # print_py(py$gene_means[1,]) # print_py(py$gene_stdevs)  ggplot(data.frame(mean=log(c(gene_mean, py$gene_means[1,])), stdev=log(c(gene_stdev, py$gene_stdevs)), impl=c(rep(\"R\", length(gene_mean)), rep(\"Py\", length(py$gene_means)))), aes(x=mean, fill=impl))+geom_density() ggplot(data.frame(mean=log(c(gene_mean, py$gene_means[1,])), stdev=log(c(gene_stdev, py$gene_stdevs)), impl=c(rep(\"R\", length(gene_mean)), rep(\"Py\", length(py$gene_means)))), aes(x=stdev, fill=impl))+geom_density() #(same as py)"},{"path":"https://furlan-lab.github.io/scrubletR/articles/ImplementationHassles.html","id":"step-2-subtract-gene-means","dir":"Articles","previous_headings":"Let’s umap > step by step","what":"Step 2 subtract gene means","title":"Implementing Scrublet in R","text":"’s get R similarly structured code Turns R peculiarities subtracting vector element-wise column values matrix must first create matrix duplicating desired subtracted values rows. Simply subtracting vector (case gene means column (gene) matrix done using simply matrix - vector) python, subtraction using numpy much easier…","code":"preZ_Eobs_norm = scrub_preZ._E_obs_norm step2 = preZ_Eobs_norm - preZ_Eobs_norm.mean(0) # this step is easy in python step2 = scr$E_obs_norm - colMeans(scr$E_obs_norm) # this doesn't work as intended in R colnames(step2)<-NULL  step2[1:10,1:10] ## 10 x 10 Matrix of class \"dgeMatrix\" ##              [,1]         [,2]        [,3]          [,4]         [,5] ##  [1,]  -1.0294501   -1.2815507  -6.4029111    -3.3582206   -2.5414889 ##  [2,]  -0.1149148   -2.7254183 -47.6427631    98.4509273 -202.0442150 ##  [3,]  -0.5069102  -26.1563220  -7.0442071    -4.8296559 -158.6784346 ##  [4,] -47.4869206   -4.9858189  -0.4297543   -57.3229486   -0.5091509 ##  [5,]  -2.7516240 -483.2102680 -76.2160384    -7.5710177   -3.4020053 ##  [6,]  -2.8772205   -6.8049528 -12.9709248    -0.4681139   -0.4705826 ##  [7,] -28.4278954 -292.2953822  -0.4011992 -2117.7123348   -0.5806434 ##  [8,]  -0.4037443   -2.1122108  -0.3693642   -19.3384333   -0.5864083 ##  [9,]  -1.5197192   -0.5371283  -0.5010018   -27.5754728   -1.9881826 ## [10,]  -0.7596383   -1.8024743 -34.4138321    -0.3174581  -45.4030655 ##                [,6]         [,7]         [,8]         [,9]        [,10] ##  [1,]   -0.66006144   -3.7521545   -3.5579435 -168.4110083  -12.7967736 ##  [2,]   -0.51114543  -15.4614631  -68.8341475 -161.6263527   -2.8791465 ##  [3,]   -1.48972359 -430.6828817   -9.0642243   -8.6457439 -171.5477283 ##  [4,]   -0.52020704   -0.5181809 -335.3768468  -32.3952104   -1.3697266 ##  [5,]   -0.17273834   -0.6467012   -4.0768245  -99.6551555  -19.9285008 ##  [6,] -125.70835424   -2.4425953 -259.9421287   -9.7549442   -0.3627671 ##  [7,]   -0.09408157  -10.9057669  -15.1845578   -0.7617508 -156.7997910 ##  [8,]   -8.04110572  -41.6719108   -0.5136189  -17.0759625   -0.2073675 ##  [9,]   -0.95256054  417.9444652  -39.4990708   -0.4441260   -1.8115952 ## [10,] -206.12649988  128.0461667   -9.9702641 -224.8581777   -5.8393548 py$step2[1:10,1:10] ##           [,1]       [,2]       [,3]      [,4]      [,5]     [,6]     [,7] ##  [1,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [2,] -1.02945 -0.1149148 -0.5069102  52.62320 -2.751624 -2.87722 -28.4279 ##  [3,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [4,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [5,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [6,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [7,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [8,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [9,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 389.8072 ## [10,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 115.0030 ##             [,8]      [,9]      [,10] ##  [1,] -0.4037443 -1.519719 -0.7596383 ##  [2,] -0.4037443 -1.519719 -0.7596383 ##  [3,] -0.4037443 -1.519719 -0.7596383 ##  [4,] -0.4037443 -1.519719 -0.7596383 ##  [5,] -0.4037443 -1.519719 -0.7596383 ##  [6,] -0.4037443 -1.519719 -0.7596383 ##  [7,] -0.4037443 -1.519719 -0.7596383 ##  [8,] -0.4037443 -1.519719 -0.7596383 ##  [9,] -0.4037443 -1.519719 -0.7596383 ## [10,] -0.4037443 -1.519719 -0.7596383 sm<-matrix(rep(colMeans(scr$E_obs_norm), each = dim(scr$E_obs_norm)[1]), nrow=dim(scr$E_obs_norm)[1])  step2 = scr$E_obs_norm - sm colnames(step2)<-NULL  step2[1:10,1:10] ## 10 x 10 Matrix of class \"dgeMatrix\" ##           [,1]       [,2]       [,3]      [,4]      [,5]     [,6]     [,7] ##  [1,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [2,] -1.02945 -0.1149148 -0.5069102  52.62320 -2.751624 -2.87722 -28.4279 ##  [3,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [4,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [5,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [6,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [7,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [8,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [9,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 389.8072 ## [10,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 115.0030 ##             [,8]      [,9]      [,10] ##  [1,] -0.4037443 -1.519719 -0.7596383 ##  [2,] -0.4037443 -1.519719 -0.7596383 ##  [3,] -0.4037443 -1.519719 -0.7596383 ##  [4,] -0.4037443 -1.519719 -0.7596383 ##  [5,] -0.4037443 -1.519719 -0.7596383 ##  [6,] -0.4037443 -1.519719 -0.7596383 ##  [7,] -0.4037443 -1.519719 -0.7596383 ##  [8,] -0.4037443 -1.519719 -0.7596383 ##  [9,] -0.4037443 -1.519719 -0.7596383 ## [10,] -0.4037443 -1.519719 -0.7596383 py$step2[1:10,1:10] ##           [,1]       [,2]       [,3]      [,4]      [,5]     [,6]     [,7] ##  [1,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [2,] -1.02945 -0.1149148 -0.5069102  52.62320 -2.751624 -2.87722 -28.4279 ##  [3,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [4,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [5,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [6,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [7,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [8,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 -28.4279 ##  [9,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 389.8072 ## [10,] -1.02945 -0.1149148 -0.5069102 -47.48692 -2.751624 -2.87722 115.0030 ##             [,8]      [,9]      [,10] ##  [1,] -0.4037443 -1.519719 -0.7596383 ##  [2,] -0.4037443 -1.519719 -0.7596383 ##  [3,] -0.4037443 -1.519719 -0.7596383 ##  [4,] -0.4037443 -1.519719 -0.7596383 ##  [5,] -0.4037443 -1.519719 -0.7596383 ##  [6,] -0.4037443 -1.519719 -0.7596383 ##  [7,] -0.4037443 -1.519719 -0.7596383 ##  [8,] -0.4037443 -1.519719 -0.7596383 ##  [9,] -0.4037443 -1.519719 -0.7596383 ## [10,] -0.4037443 -1.519719 -0.7596383"},{"path":"https://furlan-lab.github.io/scrubletR/articles/ImplementationHassles.html","id":"step-3-complete-zscoring","dir":"Articles","previous_headings":"Let’s umap","what":"Step 3 complete zscoring","title":"Implementing Scrublet in R","text":"Looks good","code":"step3 = scr.sparse_multiply((step2).T, 1/gene_stdevs).T  scr.pipeline_zscore(scrub) step3<-t(scrubletR:::sparse_multiply(t(step2), 1 / gene_stdev))  step3[1:10,1:10] ## 10 x 10 Matrix of class \"dgeMatrix\" ##             [,1]        [,2]        [,3]       [,4]        [,5]        [,6] ##  [1,] -0.0501001 -0.01529958 -0.03374151 -0.3482865 -0.07549728 -0.07793504 ##  [2,] -0.0501001 -0.01529958 -0.03374151  0.3859579 -0.07549728 -0.07793504 ##  [3,] -0.0501001 -0.01529958 -0.03374151 -0.3482865 -0.07549728 -0.07793504 ##  [4,] -0.0501001 -0.01529958 -0.03374151 -0.3482865 -0.07549728 -0.07793504 ##  [5,] -0.0501001 -0.01529958 -0.03374151 -0.3482865 -0.07549728 -0.07793504 ##  [6,] -0.0501001 -0.01529958 -0.03374151 -0.3482865 -0.07549728 -0.07793504 ##  [7,] -0.0501001 -0.01529958 -0.03374151 -0.3482865 -0.07549728 -0.07793504 ##  [8,] -0.0501001 -0.01529958 -0.03374151 -0.3482865 -0.07549728 -0.07793504 ##  [9,] -0.0501001 -0.01529958 -0.03374151 -0.3482865 -0.07549728 -0.07793504 ## [10,] -0.0501001 -0.01529958 -0.03374151 -0.3482865 -0.07549728 -0.07793504 ##             [,7]        [,8]        [,9]       [,10] ##  [1,] -0.2614774 -0.03381616 -0.07002316 -0.04718872 ##  [2,] -0.2614774 -0.03381616 -0.07002316 -0.04718872 ##  [3,] -0.2614774 -0.03381616 -0.07002316 -0.04718872 ##  [4,] -0.2614774 -0.03381616 -0.07002316 -0.04718872 ##  [5,] -0.2614774 -0.03381616 -0.07002316 -0.04718872 ##  [6,] -0.2614774 -0.03381616 -0.07002316 -0.04718872 ##  [7,] -0.2614774 -0.03381616 -0.07002316 -0.04718872 ##  [8,] -0.2614774 -0.03381616 -0.07002316 -0.04718872 ##  [9,]  3.5854137 -0.03381616 -0.07002316 -0.04718872 ## [10,]  1.0577878 -0.03381616 -0.07002316 -0.04718872 py$step3[1:10,1:10] ##             [,1]        [,2]        [,3]       [,4]        [,5]        [,6] ##  [1,] -0.0501001 -0.01529958 -0.03374151 -0.3482865 -0.07549728 -0.07793504 ##  [2,] -0.0501001 -0.01529958 -0.03374151  0.3859579 -0.07549728 -0.07793504 ##  [3,] -0.0501001 -0.01529958 -0.03374151 -0.3482865 -0.07549728 -0.07793504 ##  [4,] -0.0501001 -0.01529958 -0.03374151 -0.3482865 -0.07549728 -0.07793504 ##  [5,] -0.0501001 -0.01529958 -0.03374151 -0.3482865 -0.07549728 -0.07793504 ##  [6,] -0.0501001 -0.01529958 -0.03374151 -0.3482865 -0.07549728 -0.07793504 ##  [7,] -0.0501001 -0.01529958 -0.03374151 -0.3482865 -0.07549728 -0.07793504 ##  [8,] -0.0501001 -0.01529958 -0.03374151 -0.3482865 -0.07549728 -0.07793504 ##  [9,] -0.0501001 -0.01529958 -0.03374151 -0.3482865 -0.07549728 -0.07793504 ## [10,] -0.0501001 -0.01529958 -0.03374151 -0.3482865 -0.07549728 -0.07793504 ##             [,7]        [,8]        [,9]       [,10] ##  [1,] -0.2614774 -0.03381616 -0.07002316 -0.04718872 ##  [2,] -0.2614774 -0.03381616 -0.07002316 -0.04718872 ##  [3,] -0.2614774 -0.03381616 -0.07002316 -0.04718872 ##  [4,] -0.2614774 -0.03381616 -0.07002316 -0.04718872 ##  [5,] -0.2614774 -0.03381616 -0.07002316 -0.04718872 ##  [6,] -0.2614774 -0.03381616 -0.07002316 -0.04718872 ##  [7,] -0.2614774 -0.03381616 -0.07002316 -0.04718872 ##  [8,] -0.2614774 -0.03381616 -0.07002316 -0.04718872 ##  [9,]  3.5854137 -0.03381616 -0.07002316 -0.04718872 ## [10,]  1.0577878 -0.03381616 -0.07002316 -0.04718872 scr$pipeline_zscore()"},{"path":"https://furlan-lab.github.io/scrubletR/articles/ImplementationHassles.html","id":"step-4-pca","dir":"Articles","previous_headings":"Let’s umap","what":"Step 4 PCA","title":"Implementing Scrublet in R","text":"Interesting tumor shows less correlation across two implementations celltypes","code":"import scipy from sklearn.decomposition import PCA X_obs = scrub._E_obs_norm X_sim = scrub._E_sim_norm  pca = PCA(n_components=n_prin_comps, random_state=random_state, svd_solver=svd_solver).fit(X_obs)  pto = pca.transform(X_obs) pts = pca.transform(X_sim) X_obs <- as.matrix(scr$E_obs_norm) X_sim <- as.matrix(scr$E_sim_norm) pca <- irlba::prcomp_irlba(X_obs, n = n_prin_comps, center = TRUE, scale. = FALSE)   ix<-sample(1:nrow(X_obs), 2000)   ggplot(data.frame(py = abs(py$pto[ix,1]), R = abs(predict(pca, X_obs)[ix,1])), aes(x=R, y=py))+geom_point()+theme_bw()+ggtitle(\"Correlation of R and Python PC values\") scr$pipeline_pca() scr$calculate_doublet_scores() scr$call_doublets() scr.pipeline_pca(scrub) scrub.calculate_doublet_scores(             use_approx_neighbors=use_approx_neighbors,             distance_metric=distance_metric,             get_doublet_neighbor_parents=get_doublet_neighbor_parents             ) ## array([0.05319149, 0.0928    , 0.06432749, ..., 0.07152682, 0.11666667, ##        0.21625544]) scrub.call_doublets(verbose=verbose) ## Automatically set threshold at doublet score = 0.68 ## Detected doublet rate = 0.0% ## Estimated detectable doublet fraction = 14.2% ## Overall doublet rate: ##  Expected   = 10.0% ##  Estimated  = 0.3% ## array([False, False, False, ..., False, False, False]) final_doublet = scrub.doublet_scores_obs_ ggplot(data.frame(py = log(py$final_doublet), R = log(scr$doublet_scores_obs_), celltype = seuP$celltype), aes(x=R, y=py, color = celltype))+geom_point(size = 0.3)+theme_bw()+ggtitle(\"Correlation of R and Python doublet scores (log transformed)\")+scale_color_manual(values = as.character(pals::polychrome())) ggplot(data.frame(py = log(py$final_doublet), R = log(scr$doublet_scores_obs_), genotype = seuP$geno), aes(x=R, y=py, color = genotype))+geom_point(size = 0.3, alpha = 0.3)+theme_bw()+ggtitle(\"Correlation of R and Python doublet scores (log transformed)\")"},{"path":"https://furlan-lab.github.io/scrubletR/articles/ImplementationHassles.html","id":"appendix","dir":"Articles","previous_headings":"Let’s umap","what":"Appendix","title":"Implementing Scrublet in R","text":"","code":"sessionInfo() ## R version 4.3.1 (2023-06-16) ## Platform: x86_64-apple-darwin20 (64-bit) ## Running under: macOS Ventura 13.6.3 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRblas.0.dylib  ## LAPACK: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/Los_Angeles ## tzcode source: internal ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ##  [1] magrittr_2.0.3       ggplot2_3.4.4        Matrix_1.6-5         ##  [4] scCustomize_2.0.1    Seurat_5.0.1.9004    SeuratObject_5.0.1   ##  [7] sp_2.1-3             viewmastRust_0.1.5.1 scrubletR_0.1.1      ## [10] reticulate_1.35.0    ##  ## loaded via a namespace (and not attached): ##   [1] fs_1.6.3                    matrixStats_1.2.0           ##   [3] spatstat.sparse_3.0-3       bitops_1.0-7                ##   [5] lubridate_1.9.3             httr_1.4.7                  ##   [7] RColorBrewer_1.1-3          doParallel_1.0.17           ##   [9] tools_4.3.1                 sctransform_0.4.1           ##  [11] backports_1.4.1             utf8_1.2.4                  ##  [13] R6_2.5.1                    lazyeval_0.2.2              ##  [15] uwot_0.1.16                 GetoptLong_1.0.5            ##  [17] withr_3.0.0                 gridExtra_2.3               ##  [19] progressr_0.14.0            cli_3.6.2                   ##  [21] Biobase_2.60.0              textshaping_0.3.7           ##  [23] spatstat.explore_3.2-6      fastDummies_1.7.3           ##  [25] labeling_0.4.3              prismatic_1.1.1             ##  [27] sass_0.4.8                  spatstat.data_3.0-4         ##  [29] ggridges_0.5.6              pbapply_1.7-2               ##  [31] pkgdown_2.0.7               systemfonts_1.0.5           ##  [33] foreign_0.8-86              dichromat_2.0-0.1           ##  [35] parallelly_1.36.0           maps_3.4.2                  ##  [37] pals_1.8                    rstudioapi_0.15.0           ##  [39] generics_0.1.3              shape_1.4.6                 ##  [41] ica_1.0-3                   spatstat.random_3.2-2       ##  [43] dplyr_1.1.4                 ggbeeswarm_0.7.2            ##  [45] fansi_1.0.6                 S4Vectors_0.38.2            ##  [47] abind_1.4-5                 lifecycle_1.0.4             ##  [49] yaml_2.3.8                  snakecase_0.11.1            ##  [51] SummarizedExperiment_1.30.2 recipes_1.0.9               ##  [53] Rtsne_0.17                  paletteer_1.6.0             ##  [55] grid_4.3.1                  promises_1.2.1              ##  [57] crayon_1.5.2                miniUI_0.1.1.1              ##  [59] lattice_0.22-5              cowplot_1.1.3               ##  [61] mapproj_1.2.11              pillar_1.9.0                ##  [63] knitr_1.45                  ComplexHeatmap_2.16.0       ##  [65] GenomicRanges_1.52.1        rjson_0.2.21                ##  [67] boot_1.3-28.1               future.apply_1.11.1         ##  [69] codetools_0.2-19            leiden_0.4.3.1              ##  [71] glue_1.7.0                  MatrixExtra_0.1.15          ##  [73] data.table_1.15.0           float_0.3-2                 ##  [75] vctrs_0.6.5                 png_0.1-8                   ##  [77] spam_2.10-0                 gtable_0.3.4                ##  [79] rematch2_2.1.2              assertthat_0.2.1            ##  [81] cachem_1.0.8                gower_1.0.1                 ##  [83] xfun_0.41                   S4Arrays_1.2.0              ##  [85] mime_0.12                   prodlim_2023.08.28          ##  [87] survival_3.5-7              timeDate_4032.109           ##  [89] SingleCellExperiment_1.22.0 iterators_1.0.14            ##  [91] pbmcapply_1.5.1             hardhat_1.3.0               ##  [93] lava_1.7.3                  ellipsis_0.3.2              ##  [95] fitdistrplus_1.1-11         ROCR_1.0-11                 ##  [97] ipred_0.9-14                nlme_3.1-164                ##  [99] RcppAnnoy_0.0.22            GenomeInfoDb_1.36.4         ## [101] bslib_0.6.1                 irlba_2.3.5.1               ## [103] vipor_0.4.7                 KernSmooth_2.23-22          ## [105] rpart_4.1.23                colorspace_2.1-0            ## [107] BiocGenerics_0.46.0         Hmisc_5.1-1                 ## [109] nnet_7.3-19                 ggrastr_1.0.2               ## [111] tidyselect_1.2.0            compiler_4.3.1              ## [113] htmlTable_2.4.2             desc_1.4.3                  ## [115] DelayedArray_0.26.7         plotly_4.10.4               ## [117] checkmate_2.3.1             scales_1.3.0                ## [119] lmtest_0.9-40               stringr_1.5.1               ## [121] digest_0.6.34               goftest_1.2-3               ## [123] spatstat.utils_3.0-4        minqa_1.2.6                 ## [125] rmarkdown_2.25              XVector_0.40.0              ## [127] RhpcBLASctl_0.23-42         htmltools_0.5.7             ## [129] pkgconfig_2.0.3             base64enc_0.1-3             ## [131] lme4_1.1-35.1               sparseMatrixStats_1.12.2    ## [133] MatrixGenerics_1.12.3       highr_0.10                  ## [135] fastmap_1.1.1               rlang_1.1.3                 ## [137] GlobalOptions_0.1.2         htmlwidgets_1.6.4           ## [139] shiny_1.8.0                 DelayedMatrixStats_1.22.6   ## [141] farver_2.1.1                jquerylib_0.1.4             ## [143] zoo_1.8-12                  jsonlite_1.8.8              ## [145] ModelMetrics_1.2.2.2        RCurl_1.98-1.14             ## [147] Formula_1.2-5               GenomeInfoDbData_1.2.10     ## [149] dotCall64_1.1-1             patchwork_1.2.0             ## [151] munsell_0.5.0               Rcpp_1.0.12                 ## [153] stringi_1.8.3               pROC_1.18.5                 ## [155] zlibbioc_1.46.0             MASS_7.3-60.0.1             ## [157] plyr_1.8.9                  parallel_4.3.1              ## [159] listenv_0.9.1               ggrepel_0.9.5               ## [161] forcats_1.0.0               deldir_2.0-2                ## [163] splines_4.3.1               tensor_1.5                  ## [165] circlize_0.4.15             igraph_2.0.1.1              ## [167] spatstat.geom_3.2-8         RcppHNSW_0.6.0              ## [169] reshape2_1.4.4              stats4_4.3.1                ## [171] evaluate_0.23               ggprism_1.0.4               ## [173] nloptr_2.0.3                foreach_1.5.2               ## [175] httpuv_1.6.14               RANN_2.6.1                  ## [177] tidyr_1.3.1                 purrr_1.0.2                 ## [179] polyclip_1.10-6             future_1.33.1               ## [181] clue_0.3-65                 scattermore_1.2             ## [183] janitor_2.2.0               xtable_1.8-4                ## [185] monocle3_1.4.3              RSpectra_0.16-1             ## [187] later_1.3.2                 viridisLite_0.4.2           ## [189] class_7.3-22                ragg_1.2.7                  ## [191] tibble_3.2.1                beeswarm_0.4.0              ## [193] memoise_2.0.1               IRanges_2.34.1              ## [195] cluster_2.1.6               timechange_0.3.0            ## [197] globals_0.16.2              caret_6.0-94 getwd() ## [1] \"/Users/sfurlan/develop/scrubletR/vignettes\""},{"path":"https://furlan-lab.github.io/scrubletR/articles/InDepth.html","id":"installing-scrubletr","dir":"Articles","previous_headings":"","what":"Installing scrubletR","title":"In-depth use of ScrubletR","text":"need devtools package installed…","code":"devtools::install_github(\"furlan-lab/scrubletR\")"},{"path":"https://furlan-lab.github.io/scrubletR/articles/InDepth.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"In-depth use of ScrubletR","text":"Let’s read 10X dataset T cells two donors combined capture. use souporcell detect genetic demultiplets. Clustering higher dimension actually works better visualizing SNP clustering… First read pca-transformed probability scores souporcell algorithm enables us visualize two expected genotypes set k=3 enables 3 dimensions data algorithm (first dimension ‘cell size’ aka UMI count per cell). Therefore visualize embedding using 2nd 3rd PCs, label cells according label setting k=2. following code loads 10X data, souporcell data makes plot.","code":"rm(list = ls()) suppressPackageStartupMessages({   library(viewmastRust)   library(Seurat)   library(scCustomize)   library(scrubletR)   library(ggplot2)   library(magrittr) })  if(grepl(\"^gizmo\", Sys.info()[\"nodename\"])){   ROOT_DIR2<-\"/fh/fast/furlan_s/grp/data/experiments/MM_CarT_5p_vdjt/data/SNF\" } else {   ROOT_DIR2<-\"/Users/sfurlan/Library/CloudStorage/OneDrive-SharedLibraries-FredHutchinsonCancerCenter/Furlan_Lab - General/experiments/MM_CART/SNF\" } counts<-Read10X_h5(file.path(ROOT_DIR2, \"sample_filtered_feature_bc_matrix.h5\")) colnames(counts$`Gene Expression`)<-paste0(\"JP_709_707_IP_\", colnames(counts$`Gene Expression`)) seu<-CreateSeuratObject(counts$`Gene Expression`)  scdata<-data.table::fread(file.path(ROOT_DIR2, \"clusters_3.tsv\")) seu<-seu[,Cells(seu) %in% scdata$barcode] seu<-add_souporcell_seurat(seu, file.path(ROOT_DIR2, \"clusters_3.tsv\")) scdata<-data.table::fread(file.path(ROOT_DIR2, \"clusters_2.tsv\")) seu$geno_from2<-scdata$assignment[match(Cells(seu), scdata$barcode)] seu$geno_from2[grepl(\"\\\\/\", seu$geno_from2)]<-\"Multiplet\" DimPlot(seu, group.by = \"geno_from2\", dims = c(2,3), cols = c(\"black\", \"grey\", \"red\"))+ggtitle(\"Souporcell data (overclustered)\")"},{"path":"https://furlan-lab.github.io/scrubletR/articles/InDepth.html","id":"calculate-doublet-rate","dir":"Articles","previous_headings":"","what":"Calculate doublet rate","title":"In-depth use of ScrubletR","text":"Looks 6.6%. expect 10X capture size.","code":"table(seu$geno_from2)/dim(seu)[2] ##  ##         0         1 Multiplet  ## 0.4387415 0.4950052 0.0662533"},{"path":"https://furlan-lab.github.io/scrubletR/articles/InDepth.html","id":"run-scrublet","dir":"Articles","previous_headings":"","what":"Run scrublet","title":"In-depth use of ScrubletR","text":"looks okay. genetic multiplets ~ 2 fold increase scrublet doublet score cells genotype. course whole story expect one cell donor end droplet. Therefore > 6 percent cells ‘0’ ‘1’ genotypes also multiplets. Let’s set threshold see percents fall .","code":"seu<-scrublet(seu) seu$log_ds<-log(seu$doublet_scores)  VlnPlot_scCustom(seu, features = \"log_ds\", group.by = \"geno_from2\", pt.size = 0) thresh<-(-1.6) seu$SFdoublet<-seu$log_ds>(thresh) table(seu$SFdoublet, seu$geno_from2) ##         ##            0    1 Multiplet ##   FALSE 3027 3554       359 ##   TRUE   794  757       218 VlnPlot_scCustom(seu, features = \"log_ds\", group.by = \"geno_from2\", pt.size = 0)+geom_hline(yintercept = thresh) DimPlot(seu, group.by = \"SFdoublet\", dims = c(2,3), pt.size = 0.4)"},{"path":"https://furlan-lab.github.io/scrubletR/articles/InDepth.html","id":"visualize","dir":"Articles","previous_headings":"","what":"Visualize","title":"In-depth use of ScrubletR","text":"Let’s visualize, subset, re-embed. first need remove geno assay (seurat 5 broken)","code":"DefaultAssay(seu)<-\"RNA\" seu <-NormalizeData(seu) %>% FindVariableFeatures(nfeatures = 3000) %>% ScaleData() %>% RunPCA(npcs = 50) #ElbowPlot(seu, 50)  seu<- invisible(FindNeighbors(seu, dims = 1:30) %>% FindClusters() %>% RunUMAP(dims = 1:30)) ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ##  ## Number of nodes: 8709 ## Number of edges: 354588 ##  ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.8566 ## Number of communities: 13 ## Elapsed time: 0 seconds DimPlot(seu) FeaturePlot_scCustom(seu, features = \"CD4\") FeaturePlot_scCustom(seu, features = \"CD8A\") DimPlot(seu, group.by = \"SFdoublet\") DimPlot(seu, group.by = \"geno_from2\") seu$cell_bool<-!seu$SFdoublet & seu$geno_from2 != \"Multiplet\" table(seu$cell_bool) ##  ## FALSE  TRUE  ##  2128  6581 DimPlot(seu, group.by = \"cell_bool\") subset_cells_seurat<-function(seu, cell_bool){   if(!length(cell_bool)==length(Cells(seu))){stop(\"cell_bool argument length does not match the number of cells in Seurat object\")}   assays<-Assays(seu)   suppressWarnings(layers<-lapply(assays, function(assay) {     subset(GetAssay(seu, assay = assay), Cells(seu)[cell_bool])    }))   newseu<-CreateSeuratObject(layers[[1]], meta.data = seu@meta.data[cell_bool,])   for(i in 2:length(assays)){     newseu[[assays[i]]]<-layers[[i]]   }   newseu }  seu<-subset_cells_seurat(seu, seu$cell_bool)   seu <-NormalizeData(seu) %>% FindVariableFeatures(nfeatures = 3000) %>% ScaleData() %>% RunPCA(npcs = 50) #ElbowPlot(seu, 50)  seu<- invisible(FindNeighbors(seu, dims = 1:30) %>% FindClusters() %>% RunUMAP(dims = 1:30)) ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ##  ## Number of nodes: 6581 ## Number of edges: 273740 ##  ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.8605 ## Number of communities: 12 ## Elapsed time: 0 seconds DimPlot(seu) FeaturePlot_scCustom(seu, features = \"doublet_scores\")"},{"path":"https://furlan-lab.github.io/scrubletR/articles/InDepth.html","id":"rerun-scrublet","dir":"Articles","previous_headings":"","what":"Rerun scrublet","title":"In-depth use of ScrubletR","text":"Much better. see data simple readily distinguishable clusters. ## Appendix","code":"seu<-scrublet(seu) FeaturePlot_scCustom(seu, features = \"doublet_scores\") DimPlot(seu) FeaturePlot_scCustom(seu, features = \"CD4\") FeaturePlot_scCustom(seu, features = \"CD8A\") sessionInfo() ## R version 4.3.1 (2023-06-16) ## Platform: x86_64-apple-darwin20 (64-bit) ## Running under: macOS Ventura 13.6.3 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRblas.0.dylib  ## LAPACK: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/Los_Angeles ## tzcode source: internal ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] magrittr_2.0.3       ggplot2_3.4.4        scrubletR_0.1.1      ## [4] scCustomize_2.0.1    Seurat_5.0.1.9004    SeuratObject_5.0.1   ## [7] sp_2.1-3             viewmastRust_0.1.5.1 ##  ## loaded via a namespace (and not attached): ##   [1] fs_1.6.3                    matrixStats_1.2.0           ##   [3] spatstat.sparse_3.0-3       bitops_1.0-7                ##   [5] lubridate_1.9.3             httr_1.4.7                  ##   [7] RColorBrewer_1.1-3          doParallel_1.0.17           ##   [9] tools_4.3.1                 sctransform_0.4.1           ##  [11] backports_1.4.1             utf8_1.2.4                  ##  [13] R6_2.5.1                    lazyeval_0.2.2              ##  [15] uwot_0.1.16                 GetoptLong_1.0.5            ##  [17] withr_3.0.0                 gridExtra_2.3               ##  [19] progressr_0.14.0            cli_3.6.2                   ##  [21] Biobase_2.60.0              textshaping_0.3.7           ##  [23] spatstat.explore_3.2-6      fastDummies_1.7.3           ##  [25] labeling_0.4.3              sass_0.4.8                  ##  [27] spatstat.data_3.0-4         ggridges_0.5.6              ##  [29] pbapply_1.7-2               pkgdown_2.0.7               ##  [31] systemfonts_1.0.5           foreign_0.8-86              ##  [33] parallelly_1.36.0           rstudioapi_0.15.0           ##  [35] generics_0.1.3              shape_1.4.6                 ##  [37] ica_1.0-3                   spatstat.random_3.2-2       ##  [39] dplyr_1.1.4                 Matrix_1.6-5                ##  [41] ggbeeswarm_0.7.2            fansi_1.0.6                 ##  [43] S4Vectors_0.38.2            abind_1.4-5                 ##  [45] lifecycle_1.0.4             yaml_2.3.8                  ##  [47] snakecase_0.11.1            SummarizedExperiment_1.30.2 ##  [49] recipes_1.0.9               Rtsne_0.17                  ##  [51] paletteer_1.6.0             grid_4.3.1                  ##  [53] promises_1.2.1              crayon_1.5.2                ##  [55] miniUI_0.1.1.1              lattice_0.22-5              ##  [57] cowplot_1.1.3               pillar_1.9.0                ##  [59] knitr_1.45                  ComplexHeatmap_2.16.0       ##  [61] GenomicRanges_1.52.1        rjson_0.2.21                ##  [63] boot_1.3-28.1               future.apply_1.11.1         ##  [65] codetools_0.2-19            leiden_0.4.3.1              ##  [67] glue_1.7.0                  MatrixExtra_0.1.15          ##  [69] data.table_1.15.0           float_0.3-2                 ##  [71] vctrs_0.6.5                 png_0.1-8                   ##  [73] spam_2.10-0                 gtable_0.3.4                ##  [75] rematch2_2.1.2              assertthat_0.2.1            ##  [77] cachem_1.0.8                gower_1.0.1                 ##  [79] xfun_0.41                   S4Arrays_1.2.0              ##  [81] mime_0.12                   prodlim_2023.08.28          ##  [83] survival_3.5-7              timeDate_4032.109           ##  [85] SingleCellExperiment_1.22.0 iterators_1.0.14            ##  [87] pbmcapply_1.5.1             hardhat_1.3.0               ##  [89] lava_1.7.3                  ellipsis_0.3.2              ##  [91] fitdistrplus_1.1-11         ROCR_1.0-11                 ##  [93] ipred_0.9-14                nlme_3.1-164                ##  [95] bit64_4.0.5                 RcppAnnoy_0.0.22            ##  [97] GenomeInfoDb_1.36.4         bslib_0.6.1                 ##  [99] irlba_2.3.5.1               vipor_0.4.7                 ## [101] KernSmooth_2.23-22          rpart_4.1.23                ## [103] colorspace_2.1-0            BiocGenerics_0.46.0         ## [105] Hmisc_5.1-1                 nnet_7.3-19                 ## [107] ggrastr_1.0.2               tidyselect_1.2.0            ## [109] bit_4.0.5                   compiler_4.3.1              ## [111] htmlTable_2.4.2             hdf5r_1.3.9                 ## [113] desc_1.4.3                  DelayedArray_0.26.7         ## [115] plotly_4.10.4               checkmate_2.3.1             ## [117] scales_1.3.0                lmtest_0.9-40               ## [119] stringr_1.5.1               digest_0.6.34               ## [121] goftest_1.2-3               spatstat.utils_3.0-4        ## [123] minqa_1.2.6                 rmarkdown_2.25              ## [125] XVector_0.40.0              RhpcBLASctl_0.23-42         ## [127] htmltools_0.5.7             pkgconfig_2.0.3             ## [129] base64enc_0.1-3             lme4_1.1-35.1               ## [131] sparseMatrixStats_1.12.2    MatrixGenerics_1.12.3       ## [133] highr_0.10                  fastmap_1.1.1               ## [135] rlang_1.1.3                 GlobalOptions_0.1.2         ## [137] htmlwidgets_1.6.4           shiny_1.8.0                 ## [139] DelayedMatrixStats_1.22.6   farver_2.1.1                ## [141] jquerylib_0.1.4             zoo_1.8-12                  ## [143] jsonlite_1.8.8              ModelMetrics_1.2.2.2        ## [145] RCurl_1.98-1.14             Formula_1.2-5               ## [147] GenomeInfoDbData_1.2.10     dotCall64_1.1-1             ## [149] patchwork_1.2.0             munsell_0.5.0               ## [151] Rcpp_1.0.12                 reticulate_1.35.0           ## [153] stringi_1.8.3               pROC_1.18.5                 ## [155] zlibbioc_1.46.0             MASS_7.3-60.0.1             ## [157] plyr_1.8.9                  parallel_4.3.1              ## [159] listenv_0.9.1               ggrepel_0.9.5               ## [161] forcats_1.0.0               deldir_2.0-2                ## [163] splines_4.3.1               tensor_1.5                  ## [165] circlize_0.4.15             igraph_2.0.1.1              ## [167] spatstat.geom_3.2-8         RcppHNSW_0.6.0              ## [169] reshape2_1.4.4              stats4_4.3.1                ## [171] evaluate_0.23               ggprism_1.0.4               ## [173] nloptr_2.0.3                foreach_1.5.2               ## [175] httpuv_1.6.14               RANN_2.6.1                  ## [177] tidyr_1.3.1                 purrr_1.0.2                 ## [179] polyclip_1.10-6             future_1.33.1               ## [181] clue_0.3-65                 scattermore_1.2             ## [183] janitor_2.2.0               xtable_1.8-4                ## [185] monocle3_1.4.3              RSpectra_0.16-1             ## [187] later_1.3.2                 viridisLite_0.4.2           ## [189] class_7.3-22                ragg_1.2.7                  ## [191] tibble_3.2.1                memoise_2.0.1               ## [193] beeswarm_0.4.0              IRanges_2.34.1              ## [195] cluster_2.1.6               timechange_0.3.0            ## [197] globals_0.16.2              caret_6.0-94 getwd() ## [1] \"/Users/sfurlan/develop/scrubletR/vignettes\""},{"path":"https://furlan-lab.github.io/scrubletR/articles/QuickStart.html","id":"installing-scrubletr","dir":"Articles","previous_headings":"","what":"Installing scrubletR","title":"Quick Start to ScrubletR","text":"need devtools package installed…","code":"devtools::install_github(\"furlan-lab/scrubletR\")"},{"path":"https://furlan-lab.github.io/scrubletR/articles/QuickStart.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Quick Start to ScrubletR","text":"","code":"suppressPackageStartupMessages({   library(viewmastRust)   library(Seurat)   library(scCustomize)   library(scrubletR) })  if(grepl(\"^gizmo\", Sys.info()[\"nodename\"])){   ROOT_DIR2<-\"/fh/fast/furlan_s/grp/data/ddata/BM_data\" } else {   ROOT_DIR2<-\"/Users/sfurlan/Library/CloudStorage/OneDrive-SharedLibraries-FredHutchinsonCancerCenter/Furlan_Lab - General/experiments/patient_marrows/aggr/cds/indy\" }  #query dataset seuP<-readRDS(file.path(ROOT_DIR2, \"220831_WC1.RDS\")) DimPlot_scCustom(seuP, label = F)"},{"path":"https://furlan-lab.github.io/scrubletR/articles/QuickStart.html","id":"run-scrubletr-the-easy-way-compatible-with-seurat-and-monocle3-objects","dir":"Articles","previous_headings":"","what":"Run scrubletR the easy way (compatible with Seurat and monocle3 objects)","title":"Quick Start to ScrubletR","text":"can remove object re-embed!","code":"seuP<-scrublet(seuP) FeaturePlot_scCustom(seuP, features = \"doublet_scores\") seuP$doublets<-seuP$doublet_scores > 0.15   #(You pick this) DimPlot(seuP, group.by = \"doublets\", cols=c(\"goldenrod\", \"navy\"))"},{"path":"https://furlan-lab.github.io/scrubletR/articles/QuickStart.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"Quick Start to ScrubletR","text":"","code":"sessionInfo() ## R version 4.3.1 (2023-06-16) ## Platform: x86_64-apple-darwin20 (64-bit) ## Running under: macOS Ventura 13.6.3 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRblas.0.dylib  ## LAPACK: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/Los_Angeles ## tzcode source: internal ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] scrubletR_0.1.1      scCustomize_2.0.1    Seurat_5.0.1.9004    ## [4] SeuratObject_5.0.1   sp_2.1-3             viewmastRust_0.1.5.1 ##  ## loaded via a namespace (and not attached): ##   [1] fs_1.6.3                    matrixStats_1.2.0           ##   [3] spatstat.sparse_3.0-3       bitops_1.0-7                ##   [5] lubridate_1.9.3             httr_1.4.7                  ##   [7] RColorBrewer_1.1-3          doParallel_1.0.17           ##   [9] tools_4.3.1                 sctransform_0.4.1           ##  [11] backports_1.4.1             utf8_1.2.4                  ##  [13] R6_2.5.1                    lazyeval_0.2.2              ##  [15] uwot_0.1.16                 GetoptLong_1.0.5            ##  [17] withr_3.0.0                 gridExtra_2.3               ##  [19] progressr_0.14.0            cli_3.6.2                   ##  [21] Biobase_2.60.0              textshaping_0.3.7           ##  [23] spatstat.explore_3.2-6      fastDummies_1.7.3           ##  [25] labeling_0.4.3              prismatic_1.1.1             ##  [27] sass_0.4.8                  spatstat.data_3.0-4         ##  [29] ggridges_0.5.6              pbapply_1.7-2               ##  [31] pkgdown_2.0.7               systemfonts_1.0.5           ##  [33] foreign_0.8-86              parallelly_1.36.0           ##  [35] rstudioapi_0.15.0           generics_0.1.3              ##  [37] shape_1.4.6                 ica_1.0-3                   ##  [39] spatstat.random_3.2-2       dplyr_1.1.4                 ##  [41] Matrix_1.6-5                ggbeeswarm_0.7.2            ##  [43] fansi_1.0.6                 S4Vectors_0.38.2            ##  [45] abind_1.4-5                 lifecycle_1.0.4             ##  [47] yaml_2.3.8                  snakecase_0.11.1            ##  [49] SummarizedExperiment_1.30.2 recipes_1.0.9               ##  [51] Rtsne_0.17                  paletteer_1.6.0             ##  [53] grid_4.3.1                  promises_1.2.1              ##  [55] crayon_1.5.2                miniUI_0.1.1.1              ##  [57] lattice_0.22-5              cowplot_1.1.3               ##  [59] pillar_1.9.0                knitr_1.45                  ##  [61] ComplexHeatmap_2.16.0       GenomicRanges_1.52.1        ##  [63] rjson_0.2.21                boot_1.3-28.1               ##  [65] future.apply_1.11.1         codetools_0.2-19            ##  [67] leiden_0.4.3.1              glue_1.7.0                  ##  [69] MatrixExtra_0.1.15          data.table_1.15.0           ##  [71] float_0.3-2                 vctrs_0.6.5                 ##  [73] png_0.1-8                   spam_2.10-0                 ##  [75] gtable_0.3.4                rematch2_2.1.2              ##  [77] assertthat_0.2.1            cachem_1.0.8                ##  [79] gower_1.0.1                 xfun_0.41                   ##  [81] S4Arrays_1.2.0              mime_0.12                   ##  [83] prodlim_2023.08.28          survival_3.5-7              ##  [85] timeDate_4032.109           SingleCellExperiment_1.22.0 ##  [87] iterators_1.0.14            pbmcapply_1.5.1             ##  [89] hardhat_1.3.0               lava_1.7.3                  ##  [91] ellipsis_0.3.2              fitdistrplus_1.1-11         ##  [93] ROCR_1.0-11                 ipred_0.9-14                ##  [95] nlme_3.1-164                RcppAnnoy_0.0.22            ##  [97] GenomeInfoDb_1.36.4         bslib_0.6.1                 ##  [99] irlba_2.3.5.1               vipor_0.4.7                 ## [101] KernSmooth_2.23-22          rpart_4.1.23                ## [103] colorspace_2.1-0            BiocGenerics_0.46.0         ## [105] Hmisc_5.1-1                 nnet_7.3-19                 ## [107] ggrastr_1.0.2               tidyselect_1.2.0            ## [109] compiler_4.3.1              htmlTable_2.4.2             ## [111] desc_1.4.3                  DelayedArray_0.26.7         ## [113] plotly_4.10.4               checkmate_2.3.1             ## [115] scales_1.3.0                lmtest_0.9-40               ## [117] stringr_1.5.1               digest_0.6.34               ## [119] goftest_1.2-3               spatstat.utils_3.0-4        ## [121] minqa_1.2.6                 rmarkdown_2.25              ## [123] XVector_0.40.0              RhpcBLASctl_0.23-42         ## [125] htmltools_0.5.7             pkgconfig_2.0.3             ## [127] base64enc_0.1-3             lme4_1.1-35.1               ## [129] sparseMatrixStats_1.12.2    MatrixGenerics_1.12.3       ## [131] highr_0.10                  fastmap_1.1.1               ## [133] rlang_1.1.3                 GlobalOptions_0.1.2         ## [135] htmlwidgets_1.6.4           shiny_1.8.0                 ## [137] DelayedMatrixStats_1.22.6   farver_2.1.1                ## [139] jquerylib_0.1.4             zoo_1.8-12                  ## [141] jsonlite_1.8.8              ModelMetrics_1.2.2.2        ## [143] RCurl_1.98-1.14             magrittr_2.0.3              ## [145] Formula_1.2-5               GenomeInfoDbData_1.2.10     ## [147] dotCall64_1.1-1             patchwork_1.2.0             ## [149] munsell_0.5.0               Rcpp_1.0.12                 ## [151] reticulate_1.35.0           stringi_1.8.3               ## [153] pROC_1.18.5                 zlibbioc_1.46.0             ## [155] MASS_7.3-60.0.1             plyr_1.8.9                  ## [157] parallel_4.3.1              listenv_0.9.1               ## [159] ggrepel_0.9.5               forcats_1.0.0               ## [161] deldir_2.0-2                splines_4.3.1               ## [163] tensor_1.5                  circlize_0.4.15             ## [165] igraph_2.0.1.1              spatstat.geom_3.2-8         ## [167] RcppHNSW_0.6.0              reshape2_1.4.4              ## [169] stats4_4.3.1                evaluate_0.23               ## [171] ggprism_1.0.4               nloptr_2.0.3                ## [173] foreach_1.5.2               httpuv_1.6.14               ## [175] RANN_2.6.1                  tidyr_1.3.1                 ## [177] purrr_1.0.2                 polyclip_1.10-6             ## [179] future_1.33.1               clue_0.3-65                 ## [181] scattermore_1.2             ggplot2_3.4.4               ## [183] janitor_2.2.0               xtable_1.8-4                ## [185] monocle3_1.4.3              RSpectra_0.16-1             ## [187] later_1.3.2                 viridisLite_0.4.2           ## [189] class_7.3-22                ragg_1.2.7                  ## [191] tibble_3.2.1                memoise_2.0.1               ## [193] beeswarm_0.4.0              IRanges_2.34.1              ## [195] cluster_2.1.6               timechange_0.3.0            ## [197] globals_0.16.2              caret_6.0-94 getwd() ## [1] \"/Users/sfurlan/develop/scrubletR/vignettes\""},{"path":"https://furlan-lab.github.io/scrubletR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Original Authors Scrublet Publication. .            10.1016/j.cels.2018.11.005 Scott Furlan. Author, maintainer.            R implementation","code":""},{"path":"https://furlan-lab.github.io/scrubletR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"SL W, R L, . K (2019). “Computational Identification Cell Doublets Single-Cell Transcriptomic Data.” Cell Systems, 8(4), 281-291.e9. doi:10.1016/j.cels.2018.11.005, https://www.sciencedirect.com/science/article/pii/S2405471218304745.","code":"@Article{,   title = {Computational Identification of Cell Doublets in Single-Cell Transcriptomic Data},   year = {2019},   journal = {Cell Systems},   author = {Wolock SL and Lopez R and Klein AM.},   volume = {8},   number = {4},   pages = {281-291.e9},   doi = {10.1016/j.cels.2018.11.005},   url = {https://www.sciencedirect.com/science/article/pii/S2405471218304745}, }"},{"path":"https://furlan-lab.github.io/scrubletR/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Native R implementatioin of the popular python Scrublet package for multiplet removal in single cell genomic data","text":"Written Scott Furlan.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":null,"dir":"Reference","previous_headings":"","what":"Scrublet R6 Class — ScrubletR","title":"Scrublet R6 Class — ScrubletR","text":"Scrublet R6 class represents single-cell RNA-seq scrubbing tool.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public Fields","title":"Scrublet R6 Class — ScrubletR","text":"E_obs: Observed expression matrix. E_sim: Simulated expression matrix. E_obs_norm: Normalized observed expression matrix. E_sim_norm: Normalized simulated expression matrix. gene_filter: Filter highly variable genes. embeddings: List embeddings. total_counts_obs: Total counts observed cells. total_counts_sim: Total counts simulated cells. sim_doublet_ratio: Ratio simulated doublets observed cells. n_neighbors: Number neighbors calculations. expected_doublet_rate: Expected doublet rate. stdev_doublet_rate: Standard deviation doublet rate. random_state: Seed reproducibility. doublet_parents: Matrix doublet parents. manifold_obs_: Observed manifold data. manifold_sim_: Simulated manifold data. doublet_scores_obs_: Doublet scores observed cells. doublet_scores_sim_: Doublet scores simulated cells. doublet_errors_obs_: Doublet errors observed cells. doublet_errors_sim_: Doublet errors simulated cells. doublet_neighbor_parents_: Parents doublet neighbors. predicted_doublets: Predicted doublets. z_scores_: Z-scores doublet predictions. threshold_: Threshold doublet predictions. detected_doublet_rate_: Detected doublet rate. detectable_doublet_fraction_: Detectable doublet fraction. overall_doublet_rate_: Overall doublet rate.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public Methods","title":"Scrublet R6 Class — ScrubletR","text":"get_dims: Display dimensions expression matrices. scrub_doublets: Perform scrubbing identify remove doublets. simulate_doublets: Simulate doublets based observed data. set_manifold: Set manifold data. calculate_doublet_scores: Calculate doublet scores using nearest neighbors. call_doublets: Identify doublets based scores threshold. nearest_neighbor_classifier: Nearest neighbor classification doublet scores. plot_histogram: Plot histogram doublet scores. set_embedding: Set embedding data. plot_embedding: Plot embeddings. pipeline_normalize: Normalize total counts. pipeline_get_gene_filter: Identify highly variable genes. pipeline_apply_gene_filter: Apply gene filter expression matrices. pipeline_mean_center: Mean center expression matrix. pipeline_normalize_variance: Variance normalization expression matrices. pipeline_zscore: Z-score normalization expression matrices. pipeline_log_transform: Log transform expression matrices. pipeline_truncated_svd: Truncated Singular Value Decomposition. pipeline_pca: Principal Component Analysis.","code":""},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"public-methods-1","dir":"Reference","previous_headings":"","what":"Public methods","title":"Scrublet R6 Class — ScrubletR","text":"ScrubletR$get_dims() ScrubletR$new() ScrubletR$scrub_doublets() ScrubletR$simulate_doublets() ScrubletR$set_manifold() ScrubletR$calculate_doublet_scores() ScrubletR$call_doublets() ScrubletR$nearest_neighbor_classifier() ScrubletR$plot_histogram() ScrubletR$set_embedding() ScrubletR$plot_embedding() ScrubletR$pipeline_normalize() ScrubletR$pipeline_get_gene_filter() ScrubletR$pipeline_apply_gene_filter() ScrubletR$pipeline_mean_center() ScrubletR$pipeline_normalize_variance() ScrubletR$pipeline_zscore() ScrubletR$pipeline_log_transform() ScrubletR$pipeline_truncated_svd() ScrubletR$pipeline_pca() ScrubletR$clone()","code":""},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$get_dims()"},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$new(   counts_matrix,   total_counts = NULL,   sim_doublet_ratio = 2,   n_neighbors = NULL,   expected_doublet_rate = 0.1,   stdev_doublet_rate = 0.02,   random_state = 0 )"},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$scrub_doublets(   synthetic_doublet_umi_subsampling = 1,   use_approx_neighbors = TRUE,   distance_metric = \"euclidean\",   get_doublet_neighbor_parents = FALSE,   min_counts = 3,   min_cells = 3,   min_gene_variability_pctl = 85,   log_transform = FALSE,   mean_center = T,   normalize_variance = T,   n_prin_comps = 30,   verbose = TRUE )"},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$simulate_doublets(   sim_doublet_ratio = NULL,   synthetic_doublet_umi_subsampling = 1 )"},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$set_manifold(manifold_obs, manifold_sim)"},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$calculate_doublet_scores(   use_approx_neighbors = TRUE,   distance_metric = \"euclidean\",   get_doublet_neighbor_parents = FALSE )"},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$call_doublets(threshold = NULL, verbose = TRUE)"},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$nearest_neighbor_classifier(   k = 40,   use_approx_nn = TRUE,   distance_metric = \"euclidean\",   exp_doub_rate = 0.1,   stdev_doub_rate = 0.03,   get_neighbor_parents = FALSE )"},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$plot_histogram(   scale_hist_obs = \"log\",   scale_hist_sim = \"linear\",   fig_size = c(8, 3) )"},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$set_embedding(embedding_name, coordinates)"},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$plot_embedding(   embedding_name,   score = \"raw\",   marker_size = 5,   order_points = FALSE,   fig_size = c(8, 4),   color_map = NULL )"},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$pipeline_normalize(postnorm_total = NULL)"},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$pipeline_get_gene_filter(   min_counts = 3,   min_cells = 3,   min_gene_variability_pctl = 85,   plot = T )"},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$pipeline_apply_gene_filter()"},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$pipeline_mean_center()"},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$pipeline_normalize_variance()"},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$pipeline_zscore()"},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$pipeline_log_transform(pseudocount = 1)"},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$pipeline_truncated_svd(   n_prin_comps = 30,   random_state = 0,   algorithm = \"arpack\" )"},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$pipeline_pca(   n_prin_comps = 50,   random_state = 0,   svd_solver = \"arpack\" )"},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Scrublet R6 Class — ScrubletR","text":"objects class cloneable method.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet R6 Class — ScrubletR","text":"","code":"ScrubletR$clone(deep = FALSE)"},{"path":"https://furlan-lab.github.io/scrubletR/reference/ScrubletR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scrublet R6 Class — ScrubletR","text":"deep Whether make deep clone.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/build_adj_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Adjacency Matrix — build_adj_mat","title":"Build Adjacency Matrix — build_adj_mat","text":"Build adjacency matrix provided edge list.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/build_adj_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Adjacency Matrix — build_adj_mat","text":"","code":"build_adj_mat(edges, n_nodes)"},{"path":"https://furlan-lab.github.io/scrubletR/reference/build_adj_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Adjacency Matrix — build_adj_mat","text":"edges Edge list. n_nodes Number nodes.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/build_adj_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Adjacency Matrix — build_adj_mat","text":"Adjacency matrix.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/cat_optional.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom messaging — cat_optional","title":"Custom messaging — cat_optional","text":"Custom messaging","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/cat_optional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom messaging — cat_optional","text":"","code":"cat_optional(message, verbose)"},{"path":"https://furlan-lab.github.io/scrubletR/reference/cat_optional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom messaging — cat_optional","text":"message message printed verbose verbose verbosity (bool)","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/filter_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter genes by expression level and variability — filter_genes","title":"Filter genes by expression level and variability — filter_genes","text":"function filters genes based expression level variability using v-scores.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/filter_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter genes by expression level and variability — filter_genes","text":"","code":"filter_genes(   E,   base_ix = NULL,   min_vscore_pctl = 85,   min_counts = 3,   min_cells = 3,   plot = FALSE,   sample_name = \"\" )"},{"path":"https://furlan-lab.github.io/scrubletR/reference/filter_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter genes by expression level and variability — filter_genes","text":"E counts matrix rows represent cells columns represent genes. base_ix Indices cells used v-score calculation (default: cells). min_vscore_pctl Minimum percentile threshold v-scores. min_counts Minimum expression counts required gene considered. min_cells Minimum number cells expressing gene considered. sample_name Character string specifying name sample plot title. show_vscore_plot Logical indicating whether show v-score plot.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/filter_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter genes by expression level and variability — filter_genes","text":"numeric vector containing indices filtered genes.","code":""},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/get_knn_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Get k-Nearest-Neighbor Graph — get_knn_graph","title":"Get k-Nearest-Neighbor Graph — get_knn_graph","text":"Build k-nearest-neighbor graph return edge list nearest neighbor matrix.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/get_knn_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get k-Nearest-Neighbor Graph — get_knn_graph","text":"","code":"get_knn_graph(   X,   k = 5,   dist_metric = c(\"euclidean\", \"angular\", \"manhattan\", \"hamming\"),   approx = FALSE,   return_edges = TRUE,   random_seed = 0 )"},{"path":"https://furlan-lab.github.io/scrubletR/reference/get_knn_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get k-Nearest-Neighbor Graph — get_knn_graph","text":"X Data matrix. k Number nearest neighbors. dist_metric Distance metric finding neighbors. approx Whether use approximate nearest neighbor search. return_edges Whether return edge list. random_seed Random seed reproducibility.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/get_knn_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get k-Nearest-Neighbor Graph — get_knn_graph","text":"return_edges TRUE, list containing edge list nearest neighbor matrix; otherwise, nearest neighbor matrix.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/get_vscores.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate v-scores and related statistics for genes in the input counts matrix — get_vscores","title":"Calculate v-scores and related statistics for genes in the input counts matrix — get_vscores","text":"function calculates v-scores, coefficient variation (CV), statistics genes input counts matrix. v-score -Poisson noise statistic helps assess variability gene expression levels.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/get_vscores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate v-scores and related statistics for genes in the input counts matrix — get_vscores","text":"","code":"get_vscores(E, min_mean = 0, nBins = 50, fit_percentile = 0.1, error_wt = 1)"},{"path":"https://furlan-lab.github.io/scrubletR/reference/get_vscores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate v-scores and related statistics for genes in the input counts matrix — get_vscores","text":"E counts matrix rows represent cells columns represent genes. min_mean Minimum mean expression value genes considered. nBins Number bins calculating running quantiles. fit_percentile Percentile used fitting running quantile. error_wt Weight error function optimization.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/get_vscores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate v-scores and related statistics for genes in the input counts matrix — get_vscores","text":"list containing following components:  v_scores: V-scores gene. CV_eff: Coefficient variation (CV) effective counts. CV_input: Coefficient variation (CV) input counts. gene_ix: Indices genes considered analysis. mu_gene: Mean expression values selected genes. FF_gene: Fano factor (variance mean ratio) selected genes. : Parameter '' obtained optimization. b: Parameter 'b' obtained optimization.","code":""},{"path":[]},{"path":"https://furlan-lab.github.io/scrubletR/reference/runningquantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate running quantiles for given data points — runningquantile","title":"Calculate running quantiles for given data points — runningquantile","text":"function calculates running quantiles given x y data points.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/runningquantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate running quantiles for given data points — runningquantile","text":"","code":"runningquantile(x, y, p, nBins)"},{"path":"https://furlan-lab.github.io/scrubletR/reference/runningquantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate running quantiles for given data points — runningquantile","text":"x Numeric vector representing x-axis data points. y Numeric vector representing y-axis data points. p Percentile value calculating running quantiles. nBins Number bins running quantiles.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/runningquantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate running quantiles for given data points — runningquantile","text":"list containing following components:  xOut: x-axis values running quantiles. yOut: y-axis values representing running quantiles.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/scrublet.html","id":null,"dir":"Reference","previous_headings":"","what":"Scrublet — scrublet","title":"Scrublet — scrublet","text":"Wolock SL, Lopez R, Klein . Scrublet: Computational Identification Cell Doublets Single-Cell Transcriptomic Data. Cell Syst. 2019 Apr 24;8(4):281-291.e9. doi: 10.1016/j.cels.2018.11.005. Epub 2019 Apr 3. PMID: 30954476; PMCID: PMC6625319. https://www.sciencedirect.com/science/article/pii/S2405471218304745","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/scrublet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrublet — scrublet","text":"","code":"scrublet(   object,   split_by = NULL,   return_results_only = FALSE,   min_counts = 3,   min_cells = 3,   min_gene_variability_pctl = 85,   seed = 2024,   n_prin_comps = 30,   sim_doublet_ratio = 2,   assay = \"RNA\",   cores = 1 )"},{"path":"https://furlan-lab.github.io/scrubletR/reference/scrublet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scrublet — scrublet","text":"object object upon perform Scrublet (monocle3 objects seurat supported) split_by column meta data split object running scrublet return_results_only bool (optional, default False) min_counts, int (optional, default=2), See scrublet reference min_cells, int (optional, default=3), See scrublet reference min_gene_variability_pctl, int (optional, default=85), See scrublet reference seed, seed aka random state n_prin_comps, int (optional, default=30), See scrublet reference  (Number principal components use) sim_doublet_ratio, int (optional, default=2),  number doublets simulate, relative number observed transcriptomes. high enough doublet states well-represented simulated doublets. Setting high computationally expensive. default value 2, though values low 0.5 give similar results datasets tested. cores Number cores (helps splitting object)","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/scrublet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scrublet — scrublet","text":"input CellDataSet Seurat object additional column added pData doublet_score output scrublet,","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/sparse_multiply.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiply each row of a sparse matrix by a scalar — sparse_multiply","title":"Multiply each row of a sparse matrix by a scalar — sparse_multiply","text":"function multiplies row sparse matrix scalar value.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/sparse_multiply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiply each row of a sparse matrix by a scalar — sparse_multiply","text":"","code":"sparse_multiply(E, a)"},{"path":"https://furlan-lab.github.io/scrubletR/reference/sparse_multiply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiply each row of a sparse matrix by a scalar — sparse_multiply","text":"E sparse matrix rows represent observations columns represent features. scalar value multiply row.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/sparse_multiply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiply each row of a sparse matrix by a scalar — sparse_multiply","text":"sparse matrix row multiplied scalar value.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/sparse_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate variance across the specified axis for a sparse matrix — sparse_var","title":"Calculate variance across the specified axis for a sparse matrix — sparse_var","text":"function computes variance across specified axis sparse matrix.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/sparse_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate variance across the specified axis for a sparse matrix — sparse_var","text":"","code":"sparse_var(E, axis = 1)"},{"path":"https://furlan-lab.github.io/scrubletR/reference/sparse_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate variance across the specified axis for a sparse matrix — sparse_var","text":"E sparse matrix rows represent observations columns represent features. axis integer specifying axis along variance calculated (1 rows, 2 columns).","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/sparse_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate variance across the specified axis for a sparse matrix — sparse_var","text":"numeric vector containing variance values.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/sparse_zscore.html","id":null,"dir":"Reference","previous_headings":"","what":"Z-score normalize each column of a sparse matrix — sparse_zscore","title":"Z-score normalize each column of a sparse matrix — sparse_zscore","text":"function z-score normalizes column sparse matrix.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/sparse_zscore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Z-score normalize each column of a sparse matrix — sparse_zscore","text":"","code":"sparse_zscore(E, gene_mean = NULL, gene_stdev = NULL)"},{"path":"https://furlan-lab.github.io/scrubletR/reference/sparse_zscore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Z-score normalize each column of a sparse matrix — sparse_zscore","text":"E sparse matrix rows represent observations columns represent features. gene_mean vector mean values feature (default calculated matrix). gene_stdev vector standard deviation values feature (default calculated matrix).","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/sparse_zscore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Z-score normalize each column of a sparse matrix — sparse_zscore","text":"z-score normalized sparse matrix.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/subsample_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsample counts in a sparse matrix — subsample_counts","title":"Subsample counts in a sparse matrix — subsample_counts","text":"function subsamples counts sparse matrix based given rate.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/subsample_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsample counts in a sparse matrix — subsample_counts","text":"","code":"subsample_counts(E, rate, original_totals, random_seed = 0)"},{"path":"https://furlan-lab.github.io/scrubletR/reference/subsample_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsample counts in a sparse matrix — subsample_counts","text":"E sparse matrix rows represent observations columns represent features. rate Subsampling rate counts (values 0 1). original_totals vector original total counts observation. random_seed integer specifying random seed reproducibility.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/subsample_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsample counts in a sparse matrix — subsample_counts","text":"list containing subsampled sparse matrix (E) final downsampling totals.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/threshold_minimum.html","id":null,"dir":"Reference","previous_headings":"","what":"Return threshold value based on minimum method. — threshold_minimum","title":"Return threshold value based on minimum method. — threshold_minimum","text":"histogram input image computed provided smoothed two maxima. minimum threshold value.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/threshold_minimum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return threshold value based on minimum method. — threshold_minimum","text":"","code":"threshold_minimum(image = NULL, nbins = 256, max_num_iter = 10000, hist = NULL)"},{"path":"https://furlan-lab.github.io/scrubletR/reference/threshold_minimum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return threshold value based on minimum method. — threshold_minimum","text":"image (M, N[, ...]) numeric vector, optional Grayscale input image. nbins int, optional Number bins used calculate histogram. value ignored integer arrays. max_num_iter int, optional Maximum number iterations smooth histogram. hist array, 2-tuple arrays, optional Histogram determine threshold corresponding array bin center intensities. Alternatively, histogram can passed.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/threshold_minimum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return threshold value based on minimum method. — threshold_minimum","text":"threshold float     Upper threshold value. pixels intensity higher     value assumed foreground.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/threshold_minimum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return threshold value based on minimum method. — threshold_minimum","text":"Either image hist must provided. case hist given, actual histogram image ignored.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/threshold_minimum.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Return threshold value based on minimum method. — threshold_minimum","text":"C. . Glasbey, \"analysis histogram-based thresholding     algorithms,\" CVGIP: Graphical Models Image Processing,     vol. 55, pp. 532-537, 1993.     Prewitt, JMS & Mendelsohn, ML (1966), \"analysis cell     images\", Annals New York Academy Sciences 128: 1035-1053     :DOI:`10.1111/j.1749-6632.1965.tb11715.x`","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/tot_counts_norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Total Counts Normalization — tot_counts_norm","title":"Total Counts Normalization — tot_counts_norm","text":"Total Counts Normalization","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/tot_counts_norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total Counts Normalization — tot_counts_norm","text":"","code":"tot_counts_norm(   E,   total_counts = NULL,   exclude_dominant_frac = 1,   included = integer(0),   target_total = NULL )"},{"path":"https://furlan-lab.github.io/scrubletR/reference/tot_counts_norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total Counts Normalization — tot_counts_norm","text":"E Counts matrix normalized total_counts Vector total counts per cell (NULL, computed E) exclude_dominant_frac Exclude overly abundant genes fraction (default: 1) included Indices genes include normalization (empty, genes considered) target_total Target total normalization (NULL, mean total counts used)","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/tot_counts_norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total Counts Normalization — tot_counts_norm","text":"List containing normalized counts matrix (Enorm), average total counts, vector included genes","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/validate_image_histogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to validate image histogram. — validate_image_histogram","title":"Helper function to validate image histogram. — validate_image_histogram","text":"Helper function validate image histogram.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/validate_image_histogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to validate image histogram. — validate_image_histogram","text":"","code":"validate_image_histogram(image, hist, nbins)"},{"path":"https://furlan-lab.github.io/scrubletR/reference/validate_image_histogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to validate image histogram. — validate_image_histogram","text":"image numeric vector Grayscale input image. hist array, 2-tuple arrays Histogram determine threshold corresponding array bin center intensities. nbins int Number bins used calculate histogram.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/reference/validate_image_histogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to validate image histogram. — validate_image_histogram","text":"list     list containing counts bin_centers.","code":""},{"path":"https://furlan-lab.github.io/scrubletR/news/index.html","id":"scrubletr-v011","dir":"Changelog","previous_headings":"","what":"scrubletR v0.1.1","title":"scrubletR v0.1.1","text":"first stable version","code":""}]
